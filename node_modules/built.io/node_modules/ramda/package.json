{
  "author": {
    "name": "Scott Sauyet",
    "email": "scott@sauyet.com",
    "url": "scott.sauyet.com"
  },
  "contributors": [
    {
      "name": "Michael Hurley",
      "email": "mh@buzzdecafe.com",
      "url": "http://buzzdecafe.com"
    },
    {
      "name": "Scott Sauyet",
      "email": "scott@sauyet.com",
      "url": "http://fr.umio.us"
    },
    {
      "name": "David Chambers",
      "email": "dc@davidchambers.me",
      "url": "http://davidchambers.me"
    },
    {
      "name": "Graeme Yeates",
      "email": "yeatesgraeme@gmail.com",
      "url": "https://github.com/megawac"
    }
  ],
  "name": "ramda",
  "description": "A practical functional library for JavaScript programmers.",
  "version": "0.8.0",
  "homepage": "https://www.github.com/ramda/ramda",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/ramda/ramda.git"
  },
  "main": "ramda.js",
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {},
  "devDependencies": {
    "benchmark": "~1.0.0",
    "deedpoll": "0.2.x",
    "dox": "latest",
    "envvar": "1.x.x",
    "grunt": "~0.4.5",
    "grunt-benchmark": "https://github.com/buzzdecafe/grunt-benchmark/archive/09999a8c3fbfff04a1695846c1ccd0bd8a0ef5ab.tar.gz",
    "grunt-cli": "~0.1.13",
    "grunt-contrib-connect": "^0.8.0",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-docco": "latest",
    "grunt-jscs": "~0.7.0",
    "grunt-jsdoc": "^0.6.0",
    "grunt-mocha": "~0.4.11",
    "grunt-mocha-test": "~0.11.0",
    "grunt-saucelabs": "^8.3.1",
    "lodash": "latest",
    "orchestrate": "~0.3.4",
    "q": "^1.1.1",
    "testem": "^0.6.18",
    "uglify-js": "2.4.x",
    "xyz": "0.5.x"
  },
  "readme": "Project Ramda\n=============\n\nA practical functional library for Javascript programmers.\n\n[![Build Status](https://travis-ci.org/ramda/ramda.svg?branch=master)](https://travis-ci.org/ramda/ramda)\n[![npm module](https://badge.fury.io/js/ramda.svg)](https://www.npmjs.org/package/ramda)\n[![dependencies](https://david-dm.org/ramda/ramda.png)](https://david-dm.org/ramda/ramda)\n\nGoals\n-----\n\n<img src=\"http://ramda.jcphillipps.com/logo/ramdaFilled_200x235.png\" \n     width=\"200\" height=\"235\" align=\"left\" hspace=\"12\" />\nUsing this library should feel as much like using Javascript as \npossible.  Of course it's functional Javascript, but we're not \nintroducing lambda expressions in strings, we're not borrowing consed \nlists, we're not porting over all of the Clojure functions.\n\nOur basic data structures will be normal Javascript objects, and our \nusual collections will be Javascript arrays.  We will not try to reach \nthe point where all the functions have only zero, one, or two arguments.\nWe will certainly try to keep some of the normal features of Javascript \nthat seem to be unusual in functional languages, including variable \nlength function signatures and functions as objects with properties.\n\nRamda will never be a drop-in replacement for Underscore (or LoDash, or \neven a drop-in-and-mechanically-switch-the-parameter-order-everywhere \nreplacement.) It is intended to work with a different style of coding. \nFunctional programming is in good part about immutable objects and \nside-effect free functions. While Ramda does not expect to do anything to \n*enforce* that style, its code should always work to make that style as \nfrictionless as possible.\n\nAs much as we can, we would like the implementation to be both clean and \nelegant.  But the API is king: we will sacrifice a great deal of \nimplementation elegance for even a slightly cleaner API.\n\nUnlike the developers of that silly-named _Eweda_ project, though, this \none will focus also on performance, striving for a reliable and quick \nimplementation over any notions of functional purity.\n\nInstallation\n------------\n\nTo use with node:\n\n```bash\n$ npm install ramda\n```\n\nThen in the console:\n\n```javascript\nvar ramda = require('ramda');\n```\n\nTo use directly in the browser:\n\n```html\n<script src=\"path/to/yourCopyOf/ramda.js\"></script>\n```\n\nor the minified version:\n\n```html\n<script src=\"path/to/yourCopyOf/ramda.min.js\"></script>\n```\n\nor from a CDN, either cdnjs:\n\n```html\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/ramda/0.8.0/ramda.min.js\"></script>\n```\n\nor one of the below links from [jsDelivr](http://jsdelivr.net):\n\n```html\n<script src=\"//cdn.jsdelivr.net/ramda/0.8.0/ramda.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/ramda/0.8/ramda.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/ramda/latest/ramda.min.js\"></script>\n```\n\n(note that using `latest` is taking a significant risk that ramda API changes could break your code.)\n\nThese script tags add the variable `ramda` on the browser's global scope.\n\nOr you can inject ramda into virtually any unsuspecting web site using this bookmarklet:\n\n```javascript\njavascript:(function(){var el=document.createElement('div'),b=document.getElementsByTagName('body')[0];msg='';el.style.position='fixed';el.style.height='32px';el.style.width='220px';el.style.marginLeft='-110px';el.style.top='0';el.style.left='50%';el.style.padding='5px 10px';el.style.zIndex=1001;el.style.fontSize='12px';el.style.color='#222';el.style.backgroundColor='#f99';if(typeof ramda!='undefined'){msg='This page already using ramda v'+ramda.version;return showMsg()}function getScript(url,success){var script=document.createElement('script');script.src=url;var head=document.getElementsByTagName('head')[0],done=false;script.onload=script.onreadystatechange=function(){if(!done&&(!this.readyState||this.readyState=='loaded'||this.readyState=='complete')){done=true;success();script.onload=script.onreadystatechange=null;head.removeChild(script)}};head.appendChild(script)}getScript('http://cdn.jsdelivr.net/ramda/latest/ramda.min.js',function(){if(typeof ramda=='undefined'){msg='Sorry, but Ramda wasn\\'t able to load'}else{msg='This page is now Ramda-fied with v'+ramda.version}return showMsg()});function showMsg(){el.innerHTML=msg;b.appendChild(el);window.setTimeout(function(){if(typeof jQuery=='undefined'){b.removeChild(el)}else{jQuery(el).fadeOut('slow',function(){jQuery(this).remove()})}},2500)}})();\n```\n\nDocumentation\n-------------\n\nPlease review the [API documentation](http://ramdajs.com/).\n\n\n\nIntroductions\n-------------\n\n* [Introducing Ramda](http://buzzdecafe.github.io/code/2014/05/16/introducing-ramda/) by Buzz de Cafe\n* [Why Ramda?](http://fr.umio.us/why-ramda/) by Scott Sauyet\n* [Favoring Curry](http://fr.umio.us/favoring-curry/) by Scott Sauyet\n\n\n\nThe Name\n--------\n\nOk, so we like sheep.  That's all.  It's a short name, not already \ntaken.  It could as easily have been `eweda`, but then we would be \nforced to say _eweda lamb!_, and no one wants that.  For non-English \nspeakers, lambs are baby sheep, ewes are female sheep, and rams are male \nsheep.  So perhaps ramda is a grown-up lambda... but probably not.\n\n\n\nStructure\n---------\n\n### Automatic Currying ###\n\nThe functions included should automatically allow for partial \napplication without an explicit call to lPartial.  Many of these operate \non lists.  A single list parameter should probably come last, which \nmight conflict with the design of other libraries that have strong \nfunctional components (I'm looking at you Underscore!)\n\nThe idea is that, if foldl has this signature:\n\n\n```javascript\nvar foldl = function(fn, accum, arr) { /* ... */}\n```\n\nand we have this simple function:\n\n```javascript\nvar add = function(a, b) {return a + b;};\n```\n\nthen, instead of having to manually call lPartial like this:\n\n```javascript\nvar sum = lPartial(foldl, add, 0);\nvar total = sum([1, 2, 3, 4]);\n```\n\nwith ramda, we can just do this:\n\n```javascript\nvar sum = foldl(add, 0);\nvar total = sum([1, 2, 3, 4]);\n```\n\n\nRunning The Test Suite\n----------------------\n\n**Console:**\n\nTo run the test suite from the console, you need to have `mocha` installed:\n\n    npm install -g mocha\n\nThen from the root of the project, you can just call\n\n    mocha\n\nAlternately, if you've installed the dependencies, via:\n\n    npm install\n    npm install -g grunt-cli\n\nthen you can run the tests (and get more detailed output) via our `grunt`\ntask:\n\n    grunt test\n\n**Browser:**\n\nTo run the test suite in the browser, you can simply open `test/index.html`.\n\nAlternatively, you can use [testem](https://github.com/airportyh/testem) to\ntest across different browsers (or even headlessly), with livereloading of\ntests too. Install testem (`npm install -g testem`) and run `testem`. Open the\nlink provided in your browser and you will see the results in your terminal.\n\nIf you have PhantomJS installed, you can run `testem -l phantomjs` to run the\ntests completely headlessly.\n\n![ramda on sauce labs](https://saucelabs.com/browser-matrix/ramda.svg)\n\n\n\nSo What's With Eweda?\n---------------------\n\nThe [eweda library](https://github.com/CrossEye/eweda) was written by \nthe developers of this library, with similar goals.  But that one strove \nmore for implementation elegance than for practical capabilities.  Ramda \nis all about giving users real-world tools.  Eweda can be seen more as \nan academic excercise, mostly proving out what does and doesn't work, and \ndoing so as elegantly as possible.\n\nAcknowledgements\n-----------------\n\nThanks to [J. C. Phillipps](http://www.jcphillipps.com) for the Ramda logo.\nRamda logo artwork &copy; 2014 J. C. Phillipps. Licensed Creative Commons \n[CC BY-NC-SA 3.0](http://creativecommons.org/licenses/by-nc-sa/3.0/).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ramda/ramda/issues"
  },
  "_id": "ramda@0.8.0",
  "dist": {
    "shasum": "f826cd08bef8fc95463a3ca7c0eefbceaf72673b"
  },
  "_from": "ramda@0.8.0",
  "_resolved": "https://registry.npmjs.org/ramda/-/ramda-0.8.0.tgz"
}
