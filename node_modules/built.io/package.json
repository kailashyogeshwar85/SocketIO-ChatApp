{
  "name": "built.io",
  "description": "The built.io SDK",
  "author": {
    "name": "raweng"
  },
  "version": "2.0.41",
  "dependencies": {
    "when": "3.4.3",
    "rest": "1.1.1",
    "ramda": "0.8.0",
    "mime": "1.2.11",
    "blueimp-md5": "1.1.0",
    "ua-parser-js": "0.7.3",
    "crypto": "0.0.3"
  },
  "devDependencies": {
    "socket.io": "*",
    "browserify": "*",
    "chai": "^1.9.2",
    "chai-as-promised": "*",
    "gulp": "*",
    "gulp-add-src": "^0.2.0",
    "gulp-buffer": "0.0.2",
    "gulp-clean": "^0.3.1",
    "gulp-cog": "^0.1.2",
    "gulp-concat": "^2.4.2",
    "gulp-json-editor": "^2.2.1",
    "gulp-load-plugins": "^0.7.1",
    "gulp-replace": "*",
    "gulp-rimraf": "^0.1.1",
    "gulp-run": "^1.6.4",
    "gulp-shell": "^0.2.10",
    "gulp-uglify": "^1.0.1",
    "gulp-zip": "^2.0.2",
    "jaguarjs-jsdoc": "0.0.1",
    "jsdoc": "*",
    "mocha": "*",
    "nock": "*",
    "rimraf": "^2.2.8",
    "run-sequence": "^1.0.2",
    "semver": "^4.1.0",
    "vinyl-buffer": "^1.0.0",
    "vinyl-source-stream": "^1.0.0"
  },
  "keywords": [
    "built",
    "backend",
    "baas",
    "mbaas",
    "sdk",
    "javascript"
  ],
  "scripts": {
    "WithoutRealtime": "node ./browserifyBuilds/WithoutRealTime.js",
    "WithRealtime": "node ./browserifyBuilds/WithRealTime.js",
    "generateDocsForWRT": "jsdoc -t /usr/local/lib/node_modules/jaguarjs-jsdoc/ -c templateConfig.json lib/ -d docs/docsWRT -r /home/abhijeet/Documents/node/built/jsdocReadMe/README_WRT.md",
    "generateDocsForRT": "jsdoc -t /usr/local/lib/node_modules/jaguarjs-jsdoc/ -c templateConfig.json lib/ -d docs/docsRT -r /home/abhijeet/Documents/node/built/jsdocReadMe/README_RT.md"
  },
  "main": "./lib/built",
  "readme": "# Quick Overview  \n    \n## Intro  \nThis document covers the details of JavaScript based SDK provided by built.io. The SDK is available both for Browser and Node.js environments.\n\n## API Docs\nFor detailed API docs please click [here](http://javascriptsdk.builtapp.io \"API DOCS\")  \n\n## Installation <a name=\"installation\"></a>\n\n### Node.js\n  To use this SDK on Node.js follow the below given steps.\n\n  * Download the buit.io SDK from npm repository.\n\n          npm install built.io\n  * Require the SDK module in your application.\n\n          var Built = require('built.io'); \n\n### Browser\n  To use this SDK on browser follow the below given steps.\n\n  * Download the SDK package from [here](./built.min.zip \"SDK\").\n\n  * Extract the zip package to get the **built.min.js** file and include it in a script tag as shown below.\n\n          <script type=\"text/javascript\" src=\"built.min.js\"></script>\n\n  * After the file is included a **Built** object would be avaliable globally for use as shown below.\n\n          var app = Built.App('api_key');\n\n## Basic structure\n\n  The structure followed by SDK logically resembles the application structure on built.io. Once you're done with the basic setup explained in [Installation](#installation) section, you have a Built object with you, which you can then use to initialize different modules.\n\n  Initialization process for each module is explained briefly below.\n\n  * ### Application\n\n    To initialize an app, use the App constructor on the Built object and supply it the application's api key.\n\n            var app = Built.App('api_key');\n \n  * ### Class\n\n    An application can have multiple classes. Similarly, an application instance has a class constructor which accepts the uid of the class whose instance is to be created.\n\n            var PersonClass = app.Class('person');               \n\n  * ### Object\n\n    Object is an instance of a Class. SDK follows this by providing a 'Object' constructor on the class instance. The object constructor accepts an existing object's uid or data to initialize a new object.\n\n          var Person = PersonClass.Object;\n          var person = Person({\n            name : 'Abc'\n          });\n\n  * ### Query\n\n    Query is used to retrieve objects of class based on some condition. SDK provides a Query constructor on the class instance which when executed would retrieve objects of that class.\n\n          var query = PersonClass.Query();\n\n  * ### Upload\n    \n    The Upload constructor can be accessed on the App instance.\n\n          var upload = app.Upload();\\\n\n## Cache Policies\n  \n  SDK supports caching and uses browsers 'localStorage' to maintain it. A set of cache policies are avaliable for use which are listed below.\n\n  * ##### ONLY_NETWORK (Default)\n    This is the default cache policy which will always get the data from an network call.\n\n  * ##### CACHE_ELSE_NETWORK\n    This policy will try to first get the data from cache, on failure would make a network call.\n\n  * ##### NETWORK_ELSE_CACHE\n    It will try to make a network call, on failure would fetch it from cache.\n\n  * ##### CACHE_THEN_NETWORK\n    This policy would first get the data from cache as well would make a network call to get the updated copy.\n\n  Cache policy can be set for the entire application as follows, which means all queries built using this application instance would follow the cache policy.\n\n          var app = Built.App('api_key').setCachePolicy(Built.CachePolicy.CACHE_ELSE_NETWORK);\n\n  Cache policy can also be set on individual queries as follows.\n\n          var query   = Built.App('api_key').Class('person').Query();\n          query       = query.setCachePolicy(Built.CachePolicy.CACHE_ELSE_NETWORK);\n\n## Transforms\n\n  Transforms allows you to get the objects returned from a query in format other than the default. For example, you can choose to get a Backbone.js collection instead of an array of objects.\n\n  The transforms avaliable are listed below.\n\n  * #### toJSON()\n    \n  This transform would return the query result as an array of plain javascript objects\n\n          var query   = Built.App('api_key').Class('person').Query();\n          query\n            .where('name','abc')\n            .toJSON()\n            .exec()\n            .then(function(objects){\n                console.log(objects); // array of plain javascript objects\n            });\n\n  * #### toBackbone()\n\n  This transform would return the query result as a Backbone.js collection\n\n          var query   = Built.App('api_key').Class('person').Query();\n          query\n            .where('name','abc')\n            .toBackbone()\n            .exec()\n            .then(function(collection){\n                console.log(collection); // Backbone.js collection\n            });\n\n## Immutability\n\n  The SDK follows the concept of immutability. This means any operation that intends to modify the state of an object results into the creation of a new object with the intended modification. The state of the existing object is maintained.\n\n  The advantages of immutability are explained below.\n\n1] Suppose you want to upload 3 files on built.io and all of them share the same ACL. The code for this is simplified because of immutability.\n\n  * Create an ACL object with the intended permission.\n\n            var acl     = Built.ACL();\n            acl         = acl.setPublicReadAccess(true); // Returns a new ACL object with read permission\n\n  * Create an upload object and apply ACL to it.\n\n            var upload = Built.App('api_key').Upload() \n                          .setACL(acl);   // Returns a new upload object with public read access.\n\n  * We can now create multiple uploads using the existing upload object.\n\n            var upload1 = upload.setFile('/home/abc/Pictures/tiger.gif');\n\n            var upload2 = upload.setFile('/home/abc/Pictures/duck.gif');\n\n            var upload3 = upload.setFile('/home/abc/Pictures/dolphin.gif');\n\n2] Suppose you want create two app instances which are exactly similar to each other but belong to different tenants. The code for this is simplified because of immutability.\n\n            var app   = Built.App('api_key')\n                        .setCachePolicy(Built.CachePolicy.CACHE_ELSE_NETWORK);\n\n            var app1  = app.setTenant('abc'); \n\n            var app2  = app.setTenant('xyz');\n\n\n\n## Promises\n\n  SDK uses promises for handling all of its async operations. Few examples are shown below.\n\n  * ### Saving an object\n\n    To save an object on built.io is an async task, therefore the save() method returns a promise which resolves with saved object.\n\n          Person({             // Person is object constructor\n            name : 'Abc's\n          })\n          .save()\n          .then(function(object){\n            // object returned from built.io\n          });\n\n  * ### Executing a query\n\n    Executing a query on built.io is also an async task, therefore exec() method returns a promise which resolves with all the objects which fulfils the query condition.\n\n        PersonClass\n          .Query()\n          .where('name','abc')\n          .exec()\n          .then(function(objects){\n            // All persons having name as 'abc'\n          }); ",
  "readmeFilename": "README.md",
  "_id": "built.io@2.0.41",
  "dist": {
    "shasum": "4037899ca88f9d182e673ba59bab03fcd5775ea2"
  },
  "_from": "built.io@*",
  "_resolved": "https://registry.npmjs.org/built.io/-/built.io-2.0.41.tgz"
}
