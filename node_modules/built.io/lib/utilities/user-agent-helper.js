var UAParser      = require('ua-parser-js');
var crypto        = require('crypto');
var os            = require('os');
var utility       = require('./utility');
var sdkVersion    = require('../../package').version;
var localStorage  = require('../session/local_storage');
var UUID_TOKEN    = "blt_uuid";
var UUID_TOKEN_VALUE; 

pluginsHelper.registerPlugin("analyticsConfig",{
    generate: function(uuidSize){
    if(utility.isBrowser()){
      var userAgentStr = navigator.userAgent;
      var result       = new UAParser().setUA(userAgentStr).getResult();
      var screenHeight = window.screen ? window.screen.height : "unknown"; 
      var screenWidth  = window.screen ? window.screen.width : "unknown"; 
      return {
        blt_uuid               : generateUUIDForBrowser(uuidSize),
        blt_browser            : result.browser.name,
        blt_sdk                : "JavaScript",
        blt_sdk_version        : sdkVersion,
        blt_platform           : "browser",
        blt_os                 : result.os.name,
        blt_os_version         : result.os.version,
        blt_screen_height      : screenHeight,
        blt_screen_width       : screenWidth,
        blt_screen_orientation : (screenHeight >= screenWidth)? "portrait" : "landscape",
        blt_device             : result.device.model
      }
    }else{
      var osType = getOSType();
      return {
        blt_uuid               : generateUUIDForNode(uuidSize),
        blt_sdk                : "JavaScript",
        blt_sdk_version        : sdkVersion,
        blt_platform           : "nodejs",
        blt_os                 : osType,
        blt_os_version         : os.release()
      }
    }
  }
});

function getOSType(){
  var osType = os.type();
  if(osType.match(/windows/i)){
    return 'windows';
  }else if(osType.match(/darwin/i)){
    return 'macintosh'
  }else{
    return osType;
  }
}

function generateUUIDForBrowser(length){
  var uuid = localStorage.get(UUID_TOKEN);
  if(uuid){
    return uuid
  }else{
    length = length || 16
    var uuid = 'blt'+crypto.randomBytes(length).toString('hex');
    localStorage.set(UUID_TOKEN, uuid);
    return uuid;
  }
}

function generateUUIDForNode(length){
  if(UUID_TOKEN_VALUE){
    return UUID_TOKEN_VALUE;
  }else{
    UUID_TOKEN_VALUE = 'blt'+crypto.randomBytes(length).toString('hex');
    return UUID_TOKEN_VALUE;
  }
}



