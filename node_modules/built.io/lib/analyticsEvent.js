var R                     = require('ramda');
var utility               = require('./utilities/utility');
var instanceMethodBuilder = require('./utilities/instanceMethodBuilder')();

/*
  Constants
*/
var triggerUrl   = '/trigger'; 


/**
  @class Event
  @classdesc
    Use 'Event' to trigger an event on built.io
  @description
    Represents an analytics event
  @param {string|object} uid The uid of the event, or initial values of the event
  @example
    var Event = Built.App('api_key').Analytics().Event;

    //Constructor accepting event uid as argument
    var event = Event('event1');

    // Constructor accepting inital properties as argument
    var event = Event({
      username:'ABC';
    });
    event = event.setUid('event2');
  @return {Event}
*/

var eventCons = module.exports = R.curry(function(app, analytics, uid, properties) {
 var returnObj = {
 	app       : app,
  analytics : analytics,
  uid       : uid,
 	properties: properties
 }
  return instanceMethodBuilder.build(module.exports, returnObj);
});

/**
  Gets the properties object assigned to this event
  @function getProperties
  @instance
  @memberof Event
  @example
    var event      = Built.App('api_key').Event('event1');
    var properties = event.getProperties();
  @return {object}
*/
var getProperties = module.exports.getProperties = function(event){
  return event.properties;
}
instanceMethodBuilder.define('getProperties',1);

/**
  Returns the uid of this event
  @function getUid
  @instance
  @memberof Event
  @example
    var event = Built.App('api_key').Event('event1');
    var uid   = event.getUid();
  @return {String}
*/
var getUid = module.exports.getUid = function(event){
  return event.uid;
}
instanceMethodBuilder.define('getUid',1);

/**
  Assigns a uid to the event
  @function setUid
  @instance
  @memberof Event
  @param {String} uid Uid for the event
  @example
    var event = Built.App('api_key').Event({
      username:'ABC'
    });
    event     = event.setUid('event1');
  @return {String}
*/
module.exports.setUid = R.curry(function(uid,event){
  return eventCons(event.app, event.analytics, uid, event.properties);
});
instanceMethodBuilder.define('setUid',2);

var setPropertiesHelper = R.curry(function(key,value,event){
  if(value instanceof Date){
    value = value.toISOString();
  }
  var newProperties     = getMixinedProperties(event);
  newProperties[key]    = value;
  return eventCons(event.app, event.analytics, event.uid, newProperties);
});

/**
  Assigns properties to the event. These are nothing but data you want to send along with the event
  @function setProperties
  @param {object} props Plain JavaScript object containing properties
  @instance
  @memberof Event
  @example
    var event = Built.App('api_key').Event('event1');
    event     = event.setProperties({ // username data is send along with the event
      username:'ABC'
    });
  @return {Event}
*/

module.exports.setProperties = R.curry(function(value, event){
  var newProperties     = R.mixin(value,getMixinedProperties(event));
  return eventCons(event.app, event.analytics, event.uid, newProperties);
});
instanceMethodBuilder.define('setProperties',2);
/**
  Assigns a date to an event
  @function setCreatedAt
  @param {Date} date The custom date object
  @instance
  @memberof Event
  @example
    var event = Built.App('api_key').Event('event1');
    event     = event.setCreatedAt(new Date());
  @return {Event}
*/
module.exports.setCreatedAt = setPropertiesHelper('created_at');
instanceMethodBuilder.define('setCreatedAt',2);

/**
  Triggers this event in built.io
  @function trigger
  @param forceTrigger Triggers regardless of the batchSize
  @instance
  @memberof Event
  @example
    var event  = Built.App('api_key').Event('event1');
    event.trigger()
      .then(function(event){
        // Returns the same event
      });
*/
module.exports.trigger = function(forceTrigger, event){
  var keyValue      = utility.keyValue;
  if(event.analytics.getBatchSize() > 1 && !forceTrigger){
    event = event.setCreatedAt(new Date());
    event.analytics.pushEventInQueue(event);
  }else{
    // Merges event.properties with event.super_properties to form a object event{ properties:{//data}, super_properties:{//data}}
    var entity                    = keyValue('event', keyValue('properties', getMixinedProperties(event)))
    entity.event.super_properties = constructSuperProperties(event.analytics)
    var adaptor       = event.app.options.adaptor;
    var requestObject = utility.getAdaptorObj('POST', getURL(event), event.app.getHeaders(), entity, null);
    adaptor.makeCall(requestObject);
  }
}
instanceMethodBuilder.define('trigger',2, [false]);

function constructSuperProperties(analytics){
  return R.mixin(analytics.getDefaultProperties(), analytics.getSuperProperties());
}

function getURL(event){ 		
  var app = event.app;
	return app.getURL() +'/events/'+ event.getUid() + triggerUrl; // GLOBAL variable
}

function getUid(){
  return event.uid;
}

function getMixinedProperties(event){
 return R.mixin({},getProperties(event))
}